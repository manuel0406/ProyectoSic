/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pkg3dmarkers;

import clases.BalanceCTableModel;
import clases.BalanceComprobacion;
import clases.Cuenta;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author manue
 */
public class BalanceComprobacionP extends javax.swing.JFrame {

    /**
     * Creates new form BalanceComprobacionP
     */
    public BalanceCTableModel balanceTModel = new BalanceCTableModel();
    Cuenta cuenta = new Cuenta();
    ArrayList<Cuenta> listCuenta = new ArrayList<Cuenta>();
    Conexion conexion= new Conexion();
    double totalDebe=0, totalHaber=0;

    public BalanceComprobacionP() {
        initComponents();
        extrayendoCuentas();
        inicializarColumnas();
        consultaInicial();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     *
     *
     */
    
    
    public void extrayendoCuentas() {

        Conexion conexion = new Conexion();

        try {
            String setenciaSql = "Select * from cuenta";
            Statement statement = conexion.conectar().createStatement();
            ResultSet resultado = statement.executeQuery(setenciaSql);

            while (resultado.next()) {
                Cuenta cuenta = new Cuenta();
                cuenta.idCuenta = resultado.getInt("idcuenta");
                cuenta.codigo = resultado.getInt("codigo");
                cuenta.totalizacion = resultado.getDouble("totalizacion");
                cuenta.deudor = resultado.getBoolean("deudor");
                listCuenta.add(cuenta);

            }

        } catch (SQLException e) {

            JOptionPane.showMessageDialog(this, "Error al extraer los datos de la tabla cuenta " + e);
        }

        // for (Cuenta cuenta1 : listCuenta) {
        //     System.out.println(cuenta1.idCuenta+" "+cuenta1.codigo + " deudor: " + cuenta1.deudor + " Totalizacion: " + cuenta1.totalizacion);
        //   }
        insertandoDatos(listCuenta);
    }

    public void insertandoDatos(ArrayList<Cuenta> listCuenta) {

        Conexion conexion = new Conexion();

        for (Cuenta cuenta1 : listCuenta) {
            System.out.println(cuenta1.idCuenta + " " + cuenta1.codigo + " deudor: " + cuenta1.deudor + " Totalizacion: " + cuenta1.totalizacion);
        }

        try {
            PreparedStatement statement = null;

            for (Cuenta cuenta : listCuenta) {

                String sentenciaSql = "Select * from balancecomprobacion where idcuenta=?";
                statement = conexion.conectar().prepareStatement(sentenciaSql);
                statement.setInt(1, cuenta.idCuenta);
                ResultSet resultado = statement.executeQuery();

                if (resultado.next()) {

                    try {

                        String sentencia = " UPDATE balancecomprobacion SET saldoacredor= ?, saldodeudor= ? WHERE idcuenta=? ";

                        PreparedStatement preparedStatement = conexion.conectar().prepareCall(sentencia);

                        if (cuenta.deudor) {
                            totalDebe +=cuenta.totalizacion;
                            preparedStatement.setDouble(1, 0.00);
                            preparedStatement.setDouble(2, cuenta.totalizacion);

                        } else {
                            totalHaber += cuenta.totalizacion;
                            preparedStatement.setDouble(1, cuenta.totalizacion);
                            preparedStatement.setDouble(2, 0.00);
                        }

                        preparedStatement.setInt(3, cuenta.idCuenta);
                        preparedStatement.executeUpdate();

                    } catch (SQLException e) {

                        JOptionPane.showMessageDialog(this, "Error al actualizar " + e);
                    }

                } else {

                    try {
                        String sentenciaIn = " INSERT INTO balancecomprobacion(idcuenta, saldoacredor, saldodeudor) Values(?, ?, ?)";

                        PreparedStatement preparedStatement = conexion.conectar().prepareStatement(sentenciaIn);
                        preparedStatement.setInt(1, cuenta.idCuenta);
                        if (cuenta.deudor) {
                            preparedStatement.setDouble(2, 0.00);
                            preparedStatement.setDouble(3, cuenta.totalizacion);

                        } else {
                            preparedStatement.setDouble(2, cuenta.totalizacion);
                            preparedStatement.setDouble(3, 0.00);

                        }

                        preparedStatement.execute();

                    } catch (SQLException e) {
                        JOptionPane.showMessageDialog(this, "Error insertar la totalizacion " + e);
                    }

                }

            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e);

        }
        
        txtTotalDebe.setText(String.valueOf(totalDebe));
        txtTotalHaber.setText(String.valueOf(totalHaber));

    }

    public void inicializarColumnas() {

        TableColumnModel tColumnModel = new DefaultTableColumnModel();

        for (int i = 0; i < 4; i++) {

            TableColumn col = new TableColumn(i);
            switch (i) {
                case 0:
                    col.setHeaderValue("Codigo");
                    break;

                case 1:
                    col.setHeaderValue("Nombre");

                    break;
                case 2:
                    col.setHeaderValue("Debe");
                    break;
                case 3:
                    col.setHeaderValue("Haber");
                    break;

            }
            tColumnModel.addColumn(col);

        }
        tableBcomprobacion.setColumnModel(tColumnModel);

    }

    public void consultaInicial() {
        Conexion conexion = new Conexion();
        try {

            String setenciaSql = "SELECT p.codigo,cc.nombreCuenta, s.saldodeudor, s.saldoacredor FROM balancecomprobacion s \n"
                    + "JOIN cuenta p ON s.idcuenta = p.idcuenta\n"
                    + "JOIN catalogoCuenta cc ON p.codigo = cc.codigo;";

            Statement statement = conexion.conectar().createStatement();

            ResultSet resultado = statement.executeQuery(setenciaSql);

            while (resultado.next()) {

                BalanceComprobacion balance = new BalanceComprobacion();

                balance.codigo = resultado.getInt("codigo");
                balance.nombreCuenta = resultado.getString("nombrecuenta");
                balance.saldodeudor=resultado.getDouble("saldodeudor");
                balance.saldoacredor= resultado.getDouble("saldoacredor");

              //  this.transaccionTModel.transacciones.add(transaccion);
                this.balanceTModel.balances.add(balance);
                

            }

         //   tablaTransacion.repaint();
         
         tableBcomprobacion.repaint();
         
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al recuperar los productos de la base comprobacion");

            ex.printStackTrace();
        }

    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        tableBalanceCAjustado = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        BtnInicioBalanceC = new javax.swing.JButton();
        BtnInventarioBalanceC = new javax.swing.JButton();
        BtnTransaBalanceC = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableBcomprobacion = new javax.swing.JTable();
        btnAjuste = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableBalanceAjustado = new javax.swing.JTable();
        txtTotalDebe = new javax.swing.JTextField();
        txtTotalHaber = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        tableBalanceCAjustado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tableBalanceCAjustado);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Balance de Comprobaci√≥n");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        BtnInicioBalanceC.setText("Inicio");
        BtnInicioBalanceC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnInicioBalanceCActionPerformed(evt);
            }
        });

        BtnInventarioBalanceC.setText("Inventario");
        BtnInventarioBalanceC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnInventarioBalanceCActionPerformed(evt);
            }
        });

        BtnTransaBalanceC.setText("Transacciones");
        BtnTransaBalanceC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnTransaBalanceCActionPerformed(evt);
            }
        });

        jLabel1.setText("Balance de Comprobaci√≥n");

        tableBcomprobacion.setModel(balanceTModel);
        tableBcomprobacion.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane1.setViewportView(tableBcomprobacion);

        btnAjuste.setText("Agregar ajuste");

        jLabel3.setText("Balance de comprobaci√≥n ajustado");

        tableBalanceAjustado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "C√≥digo", "Cuenta", "Debe", "Haber"
            }
        ));
        jScrollPane4.setViewportView(tableBalanceAjustado);

        jLabel2.setText("Total:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAjuste)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(73, 73, 73)
                                        .addComponent(txtTotalDebe, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(28, 28, 28)
                                        .addComponent(txtTotalHaber, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 593, Short.MAX_VALUE)
                                        .addComponent(jScrollPane1))))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(167, 167, 167)
                        .addComponent(BtnInicioBalanceC)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BtnTransaBalanceC)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BtnInventarioBalanceC)))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnInicioBalanceC)
                    .addComponent(BtnTransaBalanceC)
                    .addComponent(BtnInventarioBalanceC))
                .addGap(35, 35, 35)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTotalHaber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtTotalDebe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAjuste)
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnInicioBalanceCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnInicioBalanceCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BtnInicioBalanceCActionPerformed

    private void BtnInventarioBalanceCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnInventarioBalanceCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BtnInventarioBalanceCActionPerformed

    private void BtnTransaBalanceCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnTransaBalanceCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BtnTransaBalanceCActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
         try {
            conexion.conectar().close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Ocurrio un error al cerrar la conexion a la base de datos");
        }
        JOptionPane.showMessageDialog(this, "La conexion a la base de datos ha sido cerrada");
        
        
        
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BalanceComprobacionP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BalanceComprobacionP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BalanceComprobacionP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BalanceComprobacionP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BalanceComprobacionP().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnInicioBalanceC;
    private javax.swing.JButton BtnInventarioBalanceC;
    private javax.swing.JButton BtnTransaBalanceC;
    private javax.swing.JButton btnAjuste;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable tableBalanceAjustado;
    private javax.swing.JTable tableBalanceCAjustado;
    private javax.swing.JTable tableBcomprobacion;
    private javax.swing.JTextField txtTotalDebe;
    private javax.swing.JTextField txtTotalHaber;
    // End of variables declaration//GEN-END:variables
}
